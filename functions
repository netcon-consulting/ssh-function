#!/bin/bash
## these commands require ~/.ssh/config file to read servers
## it allows to target some or all servers at once
## SSH functions to run:
## "remote "$server" $commandscript"
## execute remote commands to several servers
## "rupload "$server" "$file" "$remotedir"
## upload files to multiple servers
## "rdownload "$server" "$file"
## download files from multiple servers
## "rbackup "$server"
## do a remote backup of /etc or other dirs to local directory
##
## this template should be added to ~/.bashrc or ~/.bash_aliases
################################################################################################################
function remote()
{
server=$1
script=$2
##display help text if less than two parameters
if [ "$#" -le  "1" ]; then
       printf "%s\n" "" "server and script argument missing" \
       "example: remote 'server' 'script'" "server must match a Host entry in ~/.ssh/config" ""\
       "script can also be a double quoted single command"
       return
       elif [[ ! -f $2 ]]; then
        echo "#!/bin/bash" > /tmp/script
        echo 'echo -e "\e[1;31m$(hostname)\e[0m"' >> /tmp/script
	    echo "$2" >> /tmp/script
	    script=/tmp/script 
fi
## add red colored hostname to the end of script to identify which server run the script
grep -qF "31m\$(hostname)" $2 || echo 'echo -e "\e[1;31m$(hostname)\e[0m"' >> $2
## all servers in ~/.ssh/config
if [[ "$server" == "all" ]]; then
       grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} ssh {} "echo $(base64 "$script") | base64 -d | bash -s "
fi
## selected servers in ~/.ssh/config
grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} ssh {} "echo $(base64 "$script") | base64 -d | bash -s "
}
################################################################################################################
function rupload()
{
server=$1
file=$2
remote_dir=$3
if [[ "$server" == "all" ]]; then
        grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} scp "$file" {}:"$remote_dir" 
fi
if [ "$#" -le  "2" ]; then
       echo ""
       echo "Arguments missing"
       echo ""
       echo "usage: 'rupload server file-to-upload remote-dir'"
       echo "server must match a Host entry from ~/.ssh/config"
       echo ""
   else
       grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} scp "$file" {}:"$remote_dir" 
fi
}
################################################################################################################
function rdownload()
{
server=$1
file=$2
if [[ "$server" == "all" ]]; then
        grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} mkdir {}
        grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} scp {}:"$file" {}/
fi
## address selected servers or groups  in ~/.ssh/config
if [ "$#" -le  "1" ]; then
       echo ""
       echo "Arguments missing"
       echo ""
       echo "usage: 'rdownload server file-to-download'"
       echo "server must match a Host entry from ~/.ssh/config"
       echo "downloaded files can be found in serverdir"
       echo ""
   else
       grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} mkdir {}
       grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} scp {}:"$file" {}/
fi
}
################################################################################################################
function rbackup()
{
server=$1
if [[ "$server" == "all" ]]; then
        grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} ssh {} tar cvfz backup-{}.tar.gz /etc
        grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} scp {}:/root/backup-{}.tar.gz backups
        grep -e "^Host" ~/.ssh/config | awk '{ print $2 }' | xargs -I{} ssh {} rm /root/backup-{}.tar.gz
fi

if [ "$#" -le  "0" ]; then
       echo "Server argument missing"
       echo "usage: 'rbackup server' "
   else
       grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} ssh {} tar cvfz backup-{}.tar.gz /etc 	
       grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} scp {}:/root/backup-{}.tar.gz backups
       grep -e "^Host" ~/.ssh/config |grep "$server" | awk '{print $2}' | xargs -I{} ssh {} rm /root/backup-{}.tar.gz  
fi
}
################################################################################################################
